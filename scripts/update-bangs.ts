#!/usr/bin/env node

import fs from "node:fs";
import https from "node:https";
import path from "node:path";
import { fileURLToPath } from "node:url";
import { BuiltInBang } from "../src/types/types"

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// const BANG_URL = "https://duckduckgo.com/bang.js";
const BANG_URL = "https://raw.githubusercontent.com/kagisearch/bangs/refs/heads/main/data/bangs.json";
const BANG_FILE_PATH = path.join(__dirname, "..", "src", "const", "kagi-bangs.ts");

/**
 * Fetch data from Kagi
 */
function fetchBangData(): Promise<BuiltInBang[]> {
  return new Promise((resolve, reject) => {
    console.log("Fetching bang data from Kagi...");

    https
      .get(BANG_URL, (res) => {
        let data = "";

        res.on("data", (chunk) => {
          data += chunk;
        });

        res.on("end", () => {
          try {
            // Parse the JSON array from the response
            const bangData = JSON.parse(data);
            console.log(`Fetched ${bangData.length} bangs from Kagi`);
            resolve(bangData);
          } catch (error) {
            const errorMessage = error instanceof Error ? error.message : String(error);
            reject(new Error(`Failed to parse JSON: ${errorMessage}`));
          }
        });
      })
      .on("error", (error) => {
        reject(new Error(`HTTP request failed: ${error.message}`));
      });
  });
}

/**
 * Convert Kagi bang format to our format
 * Kagi format: {"c":"Reference","d":"en.wikipedia.org","r":0,"s":"Wikipedia","sc":"Encyclopedia","t":"w","u":"https://en.wikipedia.org/wiki/{{{s}}}","ts":["wiki","wikipedia"]}
 * Our format: {t: "w", s: "Wikipedia", u: "https://en.wikipedia.org/wiki/{{{s}}}", d: "en.wikipedia.org", ts: ["wiki","wikipedia"]}
 */
function convertBangFormat(bangs: BuiltInBang[]) {
  console.log("Converting bang format...");

  return bangs.map((bang) => ({
    t: bang.t, // trigger
    s: bang.s, // name/description
    u: bang.u, // url template
    d: bang.d, // domain
    ts: bang.ts ?? [] // additional triggers (optional)
  }));
}

/**
 * Generate the TypeScript file content
 */
function generateBangFileContent(bangs: BuiltInBang[]) {
  console.log("Generating TypeScript file content...");

  // Helper function to escape strings for TypeScript literals
  const escapeString = (str: string): string =>
    str.replace(/\\/g, "\\\\").replace(/"/g, '\\"');

  const bangEntries = bangs
    .map((bang) => {
      const fields = [
        `t: "${escapeString(bang.t)}"`,
        `s: "${escapeString(bang.s)}"`,
        `u: "${escapeString(bang.u)}"`,
        `d: "${escapeString(bang.d)}"`
      ];

      // Add additional triggers if they exist
      if (bang.ts && bang.ts.length > 0) {
        const escapedTriggers = bang.ts.map(t => `"${escapeString(t)}"`).join(", ");
        fields.push(`ts: [${escapedTriggers}]`);
      }

      return `  {\n    ${fields.join(",\n    ")}\n  }`;
    })
    .join(",\n");

  return `// This file is auto-generated by scripts/update-bangs.js
// Do not edit manually - changes will be overwritten
// Last updated: ${new Date().toISOString()}
import type { BuiltInBang } from "../types/types";

export const bangs: BuiltInBang[] = [
${bangEntries}
  ];
  `;
}

/**
 * Write the updated bang file
 */
function writeBangFile(content: string | NodeJS.ArrayBufferView<ArrayBufferLike>) {
  console.log(`Writing updated bang file to ${BANG_FILE_PATH}...`);

  try {
    fs.writeFileSync(BANG_FILE_PATH, content, "utf8");
    console.log("Bang file updated successfully!");
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    throw new Error(`Failed to write bang file: ${errorMessage} `);
  }
}

/**
 * Main function
 */
async function main() {
  try {
    console.log("Starting bang list update...");

    // Fetch data from Kagi
    const bangs = await fetchBangData();

    // Convert to our format
    const convertedBangs = convertBangFormat(bangs);

    // Generate file content
    const fileContent = generateBangFileContent(convertedBangs);

    // Write to file
    writeBangFile(fileContent);

    console.log(`✅ Successfully updated bang list with ${convertedBangs.length} entries`);
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : String(error);
    console.error("❌ Error updating bang list:", errorMessage);
    process.exit(1);
  }
}

// Run the script
main();
